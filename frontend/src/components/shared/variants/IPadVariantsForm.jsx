// ============================================
// ‚úÖ FILE: src/components/shared/variants/IPadVariantsForm.jsx
// ‚úÖ FORM T·∫†O BI·∫æN TH·ªÇ iPad - KH·ªöP V·ªöI M√î H√åNH IPadVariant TRONG BACKEND
// ============================================

import React from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Plus, Trash2 } from "lucide-react";

// üß© Import h√†m sinh SKU t·ª± ƒë·ªông
import { generateSKU } from "@/lib/generateSKU";

const IPadVariantsForm = ({
  variants,
  onAddVariant,
  onRemoveVariant,
  onVariantChange,
  onImageChange,
  onAddImage,
  onRemoveImage,
  onOptionChange,
  onAddOption,
  onRemoveOption,
  // üÜï Th√™m 2 props ƒë·ªÉ d√πng trong SKU (n·∫øu c√≥)
  category = "iPad",
  model = "",
}) => {
  // üß† H√†m c·∫≠p nh·∫≠t SKU t·ª± ƒë·ªông m·ªói khi thay ƒë·ªïi option
  const handleOptionChange = (vIdx, oIdx, field, value) => {
    onOptionChange(vIdx, oIdx, field, value);

    const variant = variants[vIdx];
    const option = variant.options[oIdx];

    // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
    const color = variant.color || "";
    const storage = field === "storage" ? value : option.storage || "";
    const connectivity =
      field === "connectivity" ? value : option.connectivity || "";

    // N·∫øu c√≥ ƒë·ªß d·ªØ ki·ªán th√¨ sinh SKU
    if (color && storage && connectivity) {
      const sku = generateSKU(category, model, color, storage, connectivity);
      onOptionChange(vIdx, oIdx, "sku", sku);
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <Label className="text-lg font-semibold">
          Bi·∫øn th·ªÉ s·∫£n ph·∫©m (M√†u & Phi√™n b·∫£n)
        </Label>
        <Button type="button" variant="outline" size="sm" onClick={onAddVariant}>
          <Plus className="w-4 h-4 mr-2" /> Th√™m m√†u m·ªõi
        </Button>
      </div>

      {/* Danh s√°ch c√°c bi·∫øn th·ªÉ */}
      {variants.map((variant, vIdx) => (
        <div
          key={vIdx}
          className="rounded-lg p-5 space-y-4 border bg-gray-50 shadow-sm"
        >
          {/* M√ÄU S·∫ÆC */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>
                M√†u s·∫Øc <span className="text-red-500">*</span>
              </Label>
              <Input
                placeholder="VD: V√†ng, B·∫°c, H·ªìng, Xanh"
                value={variant.color || ""}
                onChange={(e) => onVariantChange(vIdx, "color", e.target.value)}
                required
              />
            </div>
          </div>

          {/* H√åNH ·∫¢NH */}
          <div className="space-y-2">
            <Label>URL ·∫£nh (th√™m nhi·ªÅu ·∫£nh cho m·ªói m√†u)</Label>
            {variant.images?.map((img, imgIdx) => (
              <div key={imgIdx} className="flex items-center gap-3">
                <Input
                  placeholder="Nh·∫≠p URL ·∫£nh"
                  value={img}
                  onChange={(e) => onImageChange(vIdx, imgIdx, e.target.value)}
                />
                <Button
                  type="button"
                  variant="destructive"
                  size="icon"
                  onClick={() => onRemoveImage(vIdx, imgIdx)}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            ))}
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => onAddImage(vIdx)}
            >
              <Plus className="w-4 h-4 mr-2" /> Th√™m ·∫£nh
            </Button>
          </div>

          {/* C√ÅC PHI√äN B·∫¢N (storage + connectivity) */}
          <div className="space-y-3">
            <Label className="text-sm font-medium">
              Phi√™n b·∫£n (Dung l∆∞·ª£ng & K·∫øt n·ªëi)
            </Label>
            {variant.options?.map((opt, oIdx) => (
              <div
                key={oIdx}
                className="grid grid-cols-1 md:grid-cols-7 gap-3 items-end p-4 border rounded-md bg-white"
              >
                {/* STORAGE */}
                <div className="space-y-2">
                  <Label>B·ªô nh·ªõ</Label>
                  <Select
                    value={opt.storage || ""}
                    onValueChange={(value) =>
                      handleOptionChange(vIdx, oIdx, "storage", value)
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn b·ªô nh·ªõ" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="128GB">128GB</SelectItem>
                      <SelectItem value="256GB">256GB</SelectItem>
                      <SelectItem value="512GB">512GB</SelectItem>
                      <SelectItem value="1TB">1TB</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* CONNECTIVITY */}
                <div className="space-y-2">
                  <Label>K·∫øt n·ªëi</Label>
                  <Select
                    value={opt.connectivity || ""}
                    onValueChange={(value) =>
                      handleOptionChange(vIdx, oIdx, "connectivity", value)
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn k·∫øt n·ªëi" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="WIFI">Wi-Fi</SelectItem>
                      <SelectItem value="5G">5G</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* GI√Å */}
                <div className="space-y-2">
                  <Label>Gi√° g·ªëc (VNƒê)</Label>
                  <Input
                    type="number"
                    value={opt.originalPrice || ""}
                    onChange={(e) =>
                      onOptionChange(
                        vIdx,
                        oIdx,
                        "originalPrice",
                        e.target.value
                      )
                    }
                    placeholder="VD: 9990000"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Gi√° b√°n (VNƒê)</Label>
                  <Input
                    type="number"
                    value={opt.price || ""}
                    onChange={(e) =>
                      onOptionChange(
                        vIdx,
                        oIdx,
                        "price",
                        e.target.value
                      )
                    }
                    placeholder="VD: 9090000"
                  />
                </div>

                {/* T·ªíN KHO */}
                <div className="space-y-2">
                  <Label>T·ªìn kho</Label>
                  <Input
                    type="number"
                    value={opt.stock || ""}
                    onChange={(e) =>
                      onOptionChange(
                        vIdx,
                        oIdx,
                        "stock",
                        e.target.value
                      )
                    }
                    placeholder="VD: 30"
                  />
                </div>

                {/* SKU */}
                <div className="space-y-2">
                  <Label>SKU</Label>
                  <Input
                    value={opt.sku || ""}
                    onChange={(e) =>
                      onOptionChange(vIdx, oIdx, "sku", e.target.value)
                    }
                    placeholder="T·ª± ƒë·ªông t·∫°o ho·∫∑c nh·∫≠p th·ªß c√¥ng"
                  />
                </div>

                {/* N√∫t x√≥a */}
                <Button
                  type="button"
                  variant="destructive"
                  size="icon"
                  onClick={() => onRemoveOption(vIdx, oIdx)}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            ))}

            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => onAddOption(vIdx)}
            >
              <Plus className="w-4 h-4 mr-2" /> Th√™m phi√™n b·∫£n
            </Button>
          </div>

          {/* X√ìA M√ÄU */}
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => onRemoveVariant(vIdx)}
          >
            <Trash2 className="w-4 h-4 mr-2" /> X√≥a m√†u n√†y
          </Button>
        </div>
      ))}
    </div>
  );
};

export default IPadVariantsForm;